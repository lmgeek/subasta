<?php

use App\User;
use \App\Http\Requests\CreateAuctionRequest;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Session;

class AuctionFormTest extends TestCase
{
    /**
     * @Execute: phpunit --filter AuctionFormTest --testdox
     */
    public $fechaInicio;
    public $fechaFin;
    public $auction;
    /**
     * A basic test example.
     *
     * @return void
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->rules = (new CreateAuctionRequest())->rules();
        $this->validator = $this->app['validator'];
        $this->fechaInicio = \Carbon\Carbon::now();
        $this->fechaFin = \Carbon\Carbon::now();
        $this->auction = 38;
    }
    protected function getFieldValidator($field, $value)
    {
        return $this->validator->make(
            [$field => $value],
            [$field => $this->rules[$field]]
        );
    }

    protected function validateField($field, $value)
    {
        return $this->getFieldValidator($field, $value)->passes();
    }

    public function testCanVisitForm() {
        $user = User::find(2);
        $this->actingAs($user)->visit("/auction/create/{$this->auction}")->seePageIs("/auction/create/{$this->auction}");
    }
    public function testFechaInicioIsRequired() {
        $response = $this->validateField("fechaInicio","");
        $this->assertFalse($response);
    }
    public function testFechaInicioMustBeDateTime() {
        $response = $this->validateField("fechaInicio",$this->fechaInicio->format("d/m/Y"));
//        $response = $this->validateField("fechaInicio","05/13/2018 14:35");
        $this->assertFalse($response);
    }
    public function testFechaInicioMustMatchFormat() {
        $respose = $this->validateField("fechaInicio", "15:05 2018-01-01");
        $this->assertFalse($respose);
    }
    public function testFechaInicioMustBeAfterNow() {
        $response = $this->validateField("fechaInicio",$this->fechaInicio->addMinute(10)->format("d/m/Y H:i"));
        $this->assertTrue($response);
    }
    public function testFechaFinIsRequired() {
        $response = $this->validateField("fechaFin","");
        $this->assertFalse($response);
    }
    public function testFechaFinMustBeDateTime() {
        $fechaInicio = $this->fechaInicio->addMinute(10)->format("d/m/Y H:i");
        $fechaFin = $this->fechaFin->format("d/m/Y");
        $validation = $this->validator->make(
            [
                "fechaInicio" => $fechaInicio,
                "fechaFin"    => $fechaFin
            ],
            [
                "fechaFin" => $this->rules["fechaFin"]
            ]
        );
        $this->assertFalse($validation->passes());
    }
    public function testFechaFinMustMatchFormat() {
        $fechaInicio = $this->fechaInicio->format("d/m/Y H:i");
        $fechaFin = $this->fechaFin->format("H:i d/m/Y");
        $validation = $this->validator->make(
            [
                "fechaInicio" => $fechaInicio,
                "fechaFin"    => $fechaFin
            ],
            [
                "fechaFin" => $this->rules["fechaFin"]
            ]
        );
        $this->assertFalse($validation->passes());
    }
    public function testFechaFinCanNotBeBeforeFechaInicio() {
        $fechaInicio = $this->fechaInicio->addMinute(10)->format("d/m/Y H:i");
        $fechaFin = $this->fechaFin->format("d/m/Y H:i");
        $validation = $this->validator->make(
            [
            "fechaInicio" => $fechaInicio,
            "fechaFin"    => $fechaFin
            ],
            [
                "fechaFin" => $this->rules["fechaFin"]
            ]
        );
        $this->assertFalse($validation->passes());
    }
}
